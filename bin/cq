#!/bin/bash

function usage() {
    if [[ -n "$1" ]]; then
        echo "ERROR: $1"
    fi
    echo "Usage: cq [ search | build ] ..."
    echo "  cq search [ cscope | codequery ] # <symbol>"
    echo "  cq build cscope"
    echo "  cq build codequery [ c | js | go | rb | py ]"
    exit
}

if [[ -z "$1" || "$1" == "-h" ]]; then
    usage
fi

GIT_DIR=`basename $(git rev-parse --show-toplevel 2> /dev/null)`
GIT_BRANCH=`git rev-parse --abbrev-ref HEAD 2> /dev/null`

DB_DIR=${HOME}/codequery/${HOSTNAME}/${GIT_DIR}/${GIT_BRANCH}
mkdir -p $DB_DIR

CQ_DB=${DB_DIR}/codequery.db
CS_FILES=${DB_DIR}/cscope.files
CS_OUT=${DB_DIR}/cscope.out
TAGS=${DB_DIR}/tags

function cscope_search() {
    if [[ ! -f $CS_FILES || ! -f $CS_OUT ]]; then
        echo "ERROR: cscope database not found"
        exit 1
    fi

    cscope -f $CS_OUT -i $CS_FILES -k -d -L -$3 $4 | while read match; do
        read -r -a elems <<< $match
        rel_file=$(realpath --relative-to=$PWD ${elems[0]})
        echo -e "\033[35m${rel_file}\033[0m:\033[32m${elems[2]}\033[0m ${elems[@]:3}"
    done
}

function codequery_search() {
    if [[ ! -f $CQ_DB ]]; then
        echo "ERROR: codequery database not found"
        exit 1
    fi
    cqsearch -s $CQ_DB -u -p $3 -t $4 | while read match; do
        IFS=$' \t' read -r -a elems <<< $match
        IFS=$' :' read -r -a file_line <<< ${elems[1]}
        rel_file=$(realpath --relative-to=$PWD ${file_line[0]})
        echo -e "\033[35m${rel_file}\033[0m:\033[32m${file_line[1]}\033[0m ${elems[@]:2}"
    done
}

if [[ $1 == search ]]; then

    # Search the database for the current Git repo...
    if [[ $2 == cscope ]]; then
        cscope_search $*
    elif [[ $2 == codequery ]]; then
        codequery_search $*
    else
        usage "Unknown search command"
    fi

elif [[ $1 == build ]]; then

    # Build a database for the current Git repo...

    /bin/rm -f $CQ_DB
    /bin/rm -f $CS_FILES
    /bin/rm -f $CS_OUT
    /bin/rm -f $TAGS

    if [[ $2 == cscope ]]; then

        find $PWD -iname "*.c"    > $CS_FILES
        find $PWD -iname "*.cpp" >> $CS_FILES
        find $PWD -iname "*.cxx" >> $CS_FILES
        find $PWD -iname "*.cc"  >> $CS_FILES
        find $PWD -iname "*.cu"  >> $CS_FILES
        find $PWD -iname "*.h"   >> $CS_FILES
        find $PWD -iname "*.hpp" >> $CS_FILES
        find $PWD -iname "*.hxx" >> $CS_FILES
        find $PWD -iname "*.hh " >> $CS_FILES

        # XXX modify this to an "exclude" list passed on the command line
        grep -v "firmware/RTOS" $CS_FILES > ${CS_FILES}.new
        mv -f ${CS_FILES}.new $CS_FILES

        cscope -k -b -q -i $CS_FILES -f $CS_OUT

    elif [[ $2 == codequery ]]; then

        if [[ $3 == c ]]; then
            find $PWD -iname "*.c"    > $CS_FILES
            find $PWD -iname "*.cpp" >> $CS_FILES
            find $PWD -iname "*.cxx" >> $CS_FILES
            find $PWD -iname "*.cc"  >> $CS_FILES
            find $PWD -iname "*.cu"  >> $CS_FILES
            find $PWD -iname "*.h"   >> $CS_FILES
            find $PWD -iname "*.hpp" >> $CS_FILES
            find $PWD -iname "*.hxx" >> $CS_FILES
            find $PWD -iname "*.hh " >> $CS_FILES

            # XXX modify this to an "exclude" list passed on the command line
            grep -v "firmware/RTOS" $CS_FILES > ${CS_FILES}.new
            mv -f ${CS_FILES}.new $CS_FILES

            cscope -c -b -i $CS_FILES -f $CS_OUT
        elif  [[ $3 == js ]]; then
            find $PWD -iname "*.js" > $CS_FILES
            starscope -e cscope
        elif  [[ $3 == go ]]; then
            find $PWD -iname "*.go" > $CS_FILES
            starscope -e cscope
        elif  [[ $3 == rb ]]; then
            find $PWD -iname "*.rb" > $CS_FILES
            starscope -e cscope
        elif  [[ $3 == py ]]; then
            find $PWD -iname "*.py" > $CS_FILES
            pycscope -i $CS_FILES
        else
            usage "Unknown language '$3'"
        fi

        ctags --fields=+i -n -R -L $CS_FILES -f $TAGS
        cqmakedb -d -s $CQ_DB -c $CS_OUT -t $TAGS -p

    else
        usage "ERROR: Unknown build command"
    fi
else
    usage "ERROR: Unknown command"
fi

