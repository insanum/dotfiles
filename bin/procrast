#!/usr/bin/env python

import os
import time
import pexpect

CYCLES = 40   # how many complete cycles to do before exit (5=hour)
SLEEP  = 60   # how long in seconds is one square
WORK   = 10   # how many squares for work (WORK * SLEEP = time to work)
PLAY   = 2    # how many squares for play (PLAY * SLEEP = time to play)
X      = 1420 # X geometry position in pixels
Y      = 26   # Y geometry position in pixels
FONT   = "xft:terminus:bold:size=8"

PLAY_START = 'gxmessage -center -timeout 5 -title "Procrast!" "Take a break!"'
PLAY_END   = 'gxmessage -center -timeout 5 -title "Procrast!" "Back to work!"'
DZEN       = 'dzen2 -x ' + str(X) + ' -y ' + str(Y) + ' -tw 180 -ta c -fg white -bg black -e "sigusr1=raise;button3" -fn ' + FONT

TEXT_FG  = "cyan"
TEXT_BG  = "black"
WORK_FG  = "yellow"
WORK_BG  = "black"
PLAY_FG  = "green"
PLAY_BG  = "black"
PROGRESS = "Cycle %d/%d: "
RECT     = "^r(6x6)^p(1)"
RECTO    = "^ro(6x6)^p(1)"
CLRS     = "^fg(%s)^bg(%s)"

class TenTwoFive:

    def __init__(self):
        self.dzen = pexpect.spawn(DZEN)
    # end def __init__

    def _new_cycle(self):
        self.progress  = CLRS % (TEXT_FG, TEXT_BG)
        self.progress += PROGRESS % (self.cycle + 1, CYCLES)

    def _set_work_color(self):
        self.progress += CLRS % (WORK_FG, WORK_BG)

    def _set_play_color(self):
        self.progress += CLRS % (PLAY_FG, PLAY_BG)

    def _add_rectangles(self, start, end):
        for block in range(start, end):
            if self.blocks[block]:
                self.progress += RECT
            else:
                self.progress += RECTO

    def show_work_time(self):
        for current_block in range(WORK):
            self.blocks[current_block] = 1 # turn on current block
            self._new_cycle()
            self._set_work_color()
            self._add_rectangles(0, WORK)
            self._set_play_color()
            for block in range(WORK + 1, WORK + PLAY + 1):
                self.progress += RECTO
            self.dzen.sendline(self.progress)
            self.dzen.flush()
            #print self.progress
            time.sleep(SLEEP)

    def show_play_time(self):
        for current_block in range(WORK, WORK + PLAY):
            self.blocks[current_block] = 1 # turn on current block
            self._new_cycle()
            self._set_work_color()
            for block in range(WORK):
                self.progress += RECT
            self._set_play_color()
            self._add_rectangles(WORK, WORK + PLAY)
            self.dzen.sendline(self.progress)
            self.dzen.flush()
            #print self.progress
            time.sleep(SLEEP)

    def __call__(self):
        try:
            for self.cycle in range(CYCLES):
                # reset block array and turn all off
                self.blocks = []
                for i in range(0, WORK + PLAY):
                    self.blocks.append(0)
                self.show_work_time()
                os.system(PLAY_START)
                self.show_play_time()
                os.system(PLAY_END)
        except KeyboardInterrupt:
            raise SystemExit

if __name__ == "__main__" :
    ttf = TenTwoFive ()
    ttf ()

