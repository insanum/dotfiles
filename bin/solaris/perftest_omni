#!/bin/bash

#
# make sure ssh key authentication is pre-configured
#
#   <LOC>% ssh-keygen -t rsa
#   <LOC>% cat .ssh/id_rsa.pub | ssh <REM> "cat >> .ssh/authorized_keys"
#

netperf=/usr/bin/netperf

function ParseResults()
{
    OIFS=$IFS
    IFS=$'\n'

    local header=0

    for line in `cat $2`; do

        if [[ "$line" =~ ^OMNI ]]; then
            continue
        fi

        if [[ $header -eq 0 ]]; then
            echo "#$line" > $1
            header=1
            continue
        fi

        if [[ ! "$line" =~ ^[0-9]+ ]]; then
            continue
        fi

        echo "$line" >> $1

    done


    IFS=$OIFS
}

function ExecNetperfCmd()
{
    local OUTFILE=`mktemp`

    for (( count = 0 ; count < $SMP ; count++ )); do
        ( $3 >> $OUTFILE ) &
    done

    #jobs -p
    wait

    DFILE=${PRX}_${1}_${SMPCNT}_`echo "$2" | sed "s/ /_/g"`.txt

    ParseResults $DFILE $OUTFILE
    rm -f $OUTFILE

    cat $DFILE
}

dbg=0
noclr=0

if [[ -n $1 && $1 == "-n" ]]; then
   dbg=1
   shift
fi

if [[ -n $1 && $1 == "-c" ]]; then
   noclr=1
   shift
fi

CMD=`basename $0`

if [[ -z $1 || -z $2 || -z $3 || -z $4 || -z $5 ]]; then
    echo ""
    echo "Usage: $CMD <smp> <length> <loc_IP> <rem_IP> <prefix> [rem_host]"
    echo ""
    echo "  <smp>        number of simultateous netperfs to run for a test"
    echo "  <length>     how long to run a netperf test (seconds)"
    echo "  <loc_IP>     local IP address of interface to test"
    echo "  <rem_IP>     remote IP address of interface to test"
    echo "  <prefix>     all output filenames are prefixed with this string"
    echo "  [rem_host]   remote host to ssh to for reverse path tests"
    echo ""
    echo " Example: TX) $CMD 1 10 172.16.0.20 172.16.0.10 bnxe"
    echo "          RX) $CMD 1 10 172.16.0.20 172.16.0.10 bnxe eadmaka"
    echo ""
    exit
fi

SMP=$1
LEN=$2
LOC=$3
REM=$4
PRX=$5
SSH=$6

SMPCNT=`printf "%02d" $SMP`

tests=(
        "UDP STREAM 65k"   "-T udp -m 65k"
        "UDP STREAM 1b"    "-T udp -m 1"
        "UDP RR 65k"       "-T udp -r 65k,65k"
        "UDP RR 1b"        "-T udp -r 1,1"
        "UDP RR BURST 65k" "-T udp -r 65k,65k -b 16"
        "UDP RR BURST 1b"  "-T udp -r 1,1 -b 16"
        "TCP STREAM"       "-T tcp"
        "TCP RR NO BURST"  "-T tcp -r 1,1"
        "TCP RR BURST"     "-T tcp -r 1,1 -b 16"
      )

num_tests=${#tests[@]}

KEYS=`mktemp`

cat > $KEYS << NetperfOmniKeys
THROUGHPUT
LOCAL_SEND_SIZE
LOCAL_RECV_SIZE
REMOTE_SEND_SIZE
REMOTE_RECV_SIZE
REQUEST_SIZE
RESPONSE_SIZE
LOCAL_CPU_UTIL
REMOTE_CPU_UTIL
TRANSACTION_RATE
RT_LATENCY
BURST_SIZE
LOCAL_SEND_THROUGHPUT
REMOTE_RECV_THROUGHPUT
LOCAL_SEND_CALLS
LOCAL_RECV_CALLS
REMOTE_SEND_CALLS
REMOTE_RECV_CALLS
COMMAND_LINE
NetperfOmniKeys

ncmd="netperf -t OMNI -l $LEN -H $REM -C -c -- -o $KEYS -S 1M -s 1M XARGS"

if [[ -z $SSH ]]; then

  if [[ -z "$SSH_CONNECTION" ]]; then
      DIRTXT="TX"
  else
      DIRTXT="RX"
  fi

  for (( t = 0; t < $num_tests; t += 2 )); do
      cmd=`echo "$ncmd" | sed "s/XARGS/${tests[((${t}+1))]}/"`

      echo ""
      if [[ $noclr -eq 1 ]]; then
          echo -e "** $DIRTXT ${tests[${t}]}"
          echo -e "** $cmd"
      else
          echo -e "[93m** [96m$DIRTXT ${tests[${t}]}[0m"
          echo -e "[93m** $cmd[0m"
      fi
      echo ""

      if [[ $dbg -eq 0 ]]; then
          cmd=`echo "$cmd" | sed "s|netperf|$netperf|"`
          ExecNetperfCmd $DIRTXT "${tests[${t}]}" "$cmd"
      fi
  done

else

  ssh $SSH \~/bin/perftest_omni $SMP $LEN $REM $LOC $PRX

  scp $SSH:${PRX}_RX_${SMPCNT}_* .
  ssh $SSH /bin/rm -f ${PRX}_RX_${SMPCNT}_*

fi

echo ""

rm -f $KEYS

