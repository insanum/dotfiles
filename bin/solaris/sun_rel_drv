#!/bin/bash

if [ -f src/bge.h ]; then
    VP=src
elif [ -f src/bnx.h ]; then
    VP=src
elif [ -f src_bnxe/bnxe.h ]; then
    VP=src_bnxe
else
  echo "ERROR: Unknown driver (bad current working directory)!"
  exit
fi

if [ ! -f ${VP}/version.h ]; then
    echo "ERROR: version.h not found (bad current working directory)!"
    exit
fi

MAJ=`grep MAJVERSION ${VP}/version.h | awk '{ print $3 }'`
MIN=`grep MINVERSION ${VP}/version.h | awk '{ print $3 }'`
REV=`grep REVVERSION ${VP}/version.h | awk '{ print $3 }'`

VER=${MAJ}.${MIN}.${REV}

EMAILADDRS=$HOME/.priv/sun_rel_drv_addrs
if [ ! -e $EMAILADDRS ]; then
    echo "ERROR: no email addresses ($EMAILADDRS does not exist)"
    exit
fi
source $EMAILADDRS

SRCDESTDIR=${HOME}/sun_src_drops

if [ -f src/bge.h ]; then
  PKG=BRCMbge
  TITLE="Solaris 1g driver (BRCMbge $VER) for 57xx NX1"
  EMAIL_BODY_LOCATION="\\\\fs-irva-82\\nseg\\rels\\b57bge_Solaris\\$VER"
  PKGDESTDIR=/scratch/edavis/nseg/rels/b57bge_Solaris/$VER
elif [ -f src/bnx.h ]; then
  PKG=BRCMbnx
  TITLE="Solaris 1g driver (BRCMbnx $VER) for B570x NX2"
  EMAIL_BODY_LOCATION="\\\\fs-irva-82\\nseg\\rels\\bcm5706\\drivers\\solaris\\$VER"
  PKGDESTDIR=/scratch/edavis/nseg/rels/bcm5706/drivers/solaris/$VER
elif [ -f src_bnxe/bnxe.h ]; then
  PKG=BRCMbnxe
  TITLE="Solaris 10g driver (BRCMbnxe $VER) for 57710/57711/57712/578xx NX2"
  EMAIL_BODY_LOCATION="\\\\fs-irva-82\\nseg\\rels\\bcm57710\\drivers\\solaris\\$VER"
  PKGDESTDIR=/scratch/edavis/nseg/rels/bcm57710/drivers/solaris/$VER
  TOADDRS="$TOADDRS, $FCOEADDR"
else
  echo "ERROR: Unknown driver (bad current working directory)!"
  exit
fi

P4TAG=solaris-${PKG}-${VER}

function DidYou()
{
  echo "
Did you...
 1. version.h    - increment version and commit
 2. release.txt  - add notes for new version and commit
 3. dmake
"
  echo -n "Continue releasing $PKG v$VER [y/(n)]: "
  read text
  if [ "$text" != "y" ]; then
    exit
  fi
}

function PerforceLabel()
{
  E4=${HOME}/.bin/e4
  TAGGED=0
  echo "----------------------------------------"
  if [ -x $E4 ]; then
      echo -n "Create Perforce label $P4TAG [y/(n)]: "
      read text
      if [ "$text" = "y" ]; then
          $E4 -d tag -l $P4TAG ...
          TAGGED=1
      fi
  else
      echo "WARNING: 'e4' perforce script not found!"
  fi
  if [ $TAGGED -eq 0 ]; then
      echo "Make sure to create Perforce label: $P4TAG"
  fi
  echo "----------------------------------------"
}

function LatestRelNotes()
{
  eval $(grep -m 2 -n "^====" $1 | cut -d':' -f1 | tr '\n' ' ' | awk '{ print "L1=" $1 " L2=" $2; }')
  head -n $(($L2 - 2)) $1 | tail -n +$(($L1 - 2))
}

DidYou

set -o xtrace

mkdir -p $PKGDESTDIR
mkdir -p $SRCDESTDIR

/bin/cp -f pkg/${PKG}* $PKGDESTDIR
/bin/cp -f release.txt $PKGDESTDIR
/bin/cp -f readme.txt $PKGDESTDIR

TMPDEST=`mktemp -d`
SRCDIR="${PKG}-${VER}-src"
TMPSRCDIR="${TMPDEST}/${SRCDIR}"

mkdir $TMPSRCDIR
/bin/cp -r . $TMPSRCDIR
pushd $TMPSRCDIR
make clean
cd ..
zip -r ${SRCDESTDIR}/${SRCDIR}.zip $SRCDIR
popd
/bin/rm -rf ${TMPDEST}
#/bin/cp -f ${SRCDESTDIR}/${SRCDIR}.zip $PKGDESTDIR

pushd $PKGDESTDIR
md5sum * > md5sum.txt
popd

MAILMSG=`mktemp`

set +o xtrace

echo "From: $FROMADDR"              > $MAILMSG
echo "To: $TOADDRS"                >> $MAILMSG
echo "Cc: $CCADDRS"                >> $MAILMSG
echo "Bcc: $BCCADDRS"              >> $MAILMSG
echo "Subject: $TITLE released..." >> $MAILMSG
echo "Reply-To: $FROMADDR"         >> $MAILMSG
echo ""                            >> $MAILMSG
echo ""                            >> $MAILMSG
echo "  $EMAIL_BODY_LOCATION"      >> $MAILMSG
LatestRelNotes release.txt         >> $MAILMSG

echo "----------------------------------------"
cat $MAILMSG
echo "----------------------------------------"

echo -n "Send release notification Email [y/(n)]: "
read text
if [ "$text" = "y" ]; then
    cat $MAILMSG | msmtp -t --logfile=~/.msmtp.log --host=mail.broadcom.com --port=25 --protocol=smtp --from=$FROMADDR
    echo "Email sent!"
fi

/bin/rm -f $MAILMSG

PerforceLabel

echo "----------------------------------------"
echo "Proceed with Black Duck scan if required!"
echo "----------------------------------------"

