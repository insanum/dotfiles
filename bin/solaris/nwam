#!/bin/bash

SCR=nwam

function Usage()
{
    echo "
Usage: $SCR [ -h | rename-links | <prof> <cmd> [args] ]

  With NO arguments the current interface state is displayed.

  -h      this help text

  rename-links
          - rename all links to the physical name (i.e. net0 to bnx0)

  <prof>  ncpAuto | locAuto | locNoNet | [ncp|loc]<name>
          - profile names must be prefixed with 'ncp' or 'loc'

  <cmd>   list
          - show netadm profile state

          dump
          - dump netcfg profile configuration

          create <if>,[<ip/mask>|dhcp] ...
          - create an ncp or loc profile
          - ncu(s) are only added for an ncp profile

          destroy
          - destroy an ncp or loc profile

          add <if>,[<ip/mask>|dhcp] ...
          - add ncu(s) to an ncp

          remove <if> ...
          - remove ncu(s) from an ncp

          enable
          - enable an ncp

EXAMPLE:

  $SCR
  $SCR -h
  $SCR rename-links
  $SCR ncpFoo create net0,dhcp net4,172.16.99.5/24
  $SCR ncpFoo dump
  $SCR ncpFoo enable
  $SCR ncpFoo add net6,192.168.0.5/24
  $SCR ncpFoo remove net4 net6
  $SCR ncpAuto enable
  $SCR ncpFoo destroy
"
    exit
}

function renameLinks()
{
    netcfg create ncp ncpNone
    netadm enable -p ncp ncpNone

    OIFS=$IFS
    IFS=$'\n'

    for l in `dladm show-phys`; do
        NET=`echo $l | awk '{ print $1; }'`
        PHYS=`echo $l | awk '{ print $6; }'`
        if [ $NET = LINK ]; then
            continue
        fi
        echo "(sudo) Renaming $NET to $PHYS"
        sudo dladm rename-link $NET $PHYS
    done

    IFS=$OIFS

    netadm enable -p ncp Automatic
    svcadm restart svc:/network/physical:default
    sleep 3
    netcfg destroy ncp ncpNone
}

if [ -z $1 ]; then
    netadm list -x
    echo
    ipadm show-addr
    echo
    dladm show-phys
    exit
fi

if [ $1 = -h ]; then Usage; fi

if [ $1 = rename-links ]; then
    renameLinks
    exit
fi

if    [ $1 =  ncpAuto  ];  then P="ncp"; PROF="Automatic"
elif  [ $1 =  locAuto  ];  then P="loc"; PROF="Automatic"
elif  [ $1 =  locNoNet ];  then P="loc"; PROF="NoNet"
elif [[ $1 =~ ^ncp     ]]; then P="ncp"; PROF=$1
elif [[ $1 =~ ^loc     ]]; then P="loc"; PROF=$1
else echo "ERROR: Invalid profile ($1)"; exit
fi

shift

function DumpProfile()
{
    if [ $P = loc ]; then
        netcfg select loc $PROF \; list
    else
        OIFS=$IFS
        IFS=$'\n'
        for NCU in `netcfg select ncp $PROF \; list | tail +2`; do
            netcfg select ncp $PROF \; select ncu $NCU \; list
        done
        IFS=$OIFS
    fi
}

function AddNCU()
{
    # <if>,[<ip/mask>|dhcp] ...
    while [ -n ${1:-''} ]; do
        v=(${1//,/ })
        if [ -z ${v[0]} ] || [ -z ${v[1]} ]; then
            echo "ERROR: Invalid argument ($1)"
            exit
        fi

        netcfg select ncp $PROF \; create ncu phys ${v[0]}
        netcfg select ncp $PROF \; create ncu ip ${v[0]}

        if [ ${v[1]} = dhcp ]; then
            netcfg select ncp $PROF \; select ncu ip ${v[0]} \; \
                   set ip-version=ipv4 \; set ipv4-addrsrc=dhcp \; \
                   clear ipv4-addr
        else
            netcfg select ncp $PROF \; select ncu ip ${v[0]} \; \
                   set ip-version=ipv4 \; set ipv4-addrsrc=static \; \
                   set ipv4-addr=${v[1]}
        fi

        shift
    done
}

function RemoveNCU()
{
    # <if> ...
    while [ -n ${1:-''} ]; do
        netcfg select ncp $PROF \; destroy ncu phys $1
        netcfg select ncp $PROF \; destroy ncu ip $1
        shift
    done
}

if [ $1 != create ]; then
    netcfg select $P $PROF &> /dev/null
    if [ $? -ne 0 ]; then
        echo "ERROR: Invalid profile ($PROF)"
        exit
    fi
fi

if [ $1 = list ]; then
    netadm list -x -p $P $PROF
elif [ $1 = dump ]; then
    DumpProfile
elif [ $1 = create ]; then
    netcfg create $P $PROF
    if [ $P = ncp ]; then shift; AddNCU $*; fi
elif [ $1 = destroy ]; then
    netcfg destroy $P $PROF
elif [ $1 = add ]; then
    shift; AddNCU $*
elif [ $1 = remove ]; then
    shift; RemoveNCU $*
elif [ $1 = enable ]; then
    netadm enable -p $P $PROF
else
    echo "ERROR: Invalid command ($1)"
fi

