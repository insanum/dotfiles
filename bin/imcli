#!/usr/bin/python2

#
# Simple CLI wrapper to pidgin/finch that has IRC-like abilities.
# Especially useful over an ssh connection from my phone.
#
# I use the pidgin actionscripts plugin to log messages:
#   % imcli log <message>
#
# To interactively communicate:
#   % imcli
#   -> /help
#

import os, sys, time, signal, lockfile, readline
import thread, threading

log_file = os.environ['HOME'] + '/.imcli_log'
flock = lockfile.LockFile(log_file)

if len(sys.argv) > 2 and sys.argv[1] == 'log':
    # log the message and bail
    flock.acquire()
    try:
        f = open(log_file, 'a')
        f.write(time.strftime('%Y%m%d-%H:%M:%S') + ' ' + ' '.join(sys.argv[2:]) + '\n')
        f.close()
    except Exception, e:
        pass
    flock.release()
    sys.exit(0)
elif len(sys.argv) != 1:
    print "ERROR: Invalid arguments!"
    sys.exit(1)

class CLR:
    useColor = True
    def __str__(self):
        if self.useColor: return self.color
        else: return ""
class CLR_NRM(CLR):   color = "\033[0m"
class CLR_BLK(CLR):   color = "\033[0;30m"
class CLR_BRBLK(CLR): color = "\033[30;1m"
class CLR_RED(CLR):   color = "\033[0;31m"
class CLR_BRRED(CLR): color = "\033[31;1m"
class CLR_GRN(CLR):   color = "\033[0;32m"
class CLR_BRGRN(CLR): color = "\033[32;1m"
class CLR_YLW(CLR):   color = "\033[0;33m"
class CLR_BRYLW(CLR): color = "\033[33;1m"
class CLR_BLU(CLR):   color = "\033[0;34m"
class CLR_BRBLU(CLR): color = "\033[34;1m"
class CLR_MAG(CLR):   color = "\033[0;35m"
class CLR_BRMAG(CLR): color = "\033[35;1m"
class CLR_CYN(CLR):   color = "\033[0;36m"
class CLR_BRCYN(CLR): color = "\033[36;1m"
class CLR_WHT(CLR):   color = "\033[0;37m"
class CLR_BRWHT(CLR): color = "\033[37;1m"

def SIGINT_handler(signum, frame):
    print '\nSignal caught! Use \'/quit\' to exit.'

signal.signal(signal.SIGINT, SIGINT_handler)

msg_thread_go = True
last_message_from = None

def print_message(msg):
    global last_message_from
    elems = msg.split(' ', 2)
    sys.stdout.write(str(CLR_RED()) + elems[0] + str(CLR_NRM()))
    sys.stdout.write(str(CLR_BRYLW()) + ' [' + str(CLR_NRM()))
    last_message_from = elems[1].split('[')[1].split(']')[0]
    sys.stdout.write(str(CLR_BRBLU()) + last_message_from + str(CLR_NRM()))
    sys.stdout.write(str(CLR_BRYLW()) + '] ' + str(CLR_NRM()))
    message = elems[2].split(' - ', 1)
    sys.stdout.write(str(CLR_CYN()) + message[0] + str(CLR_NRM()))
    sys.stdout.write(' - ')
    sys.stdout.write(str(CLR_YLW()) + message[1] + str(CLR_NRM()))
    sys.stdout.flush()

def msg_thread_func():
    while True:
        flock.acquire()
        try:
            if os.path.exists(log_file):
                f = open(log_file, 'r+')
                for line in f:
                    print_message(line)
                f.truncate(0)
                f.close()
        except Exception, e:
            print e
        flock.release()

        time.sleep(1)
        if not msg_thread_go: break

# start thread
msg_thread = threading.Thread(target=msg_thread_func)
msg_thread.start()

def do_cmd(cmd):
    os.system(cmd)

def usage():
    print '''
 /help                          - this help output
 /quit                          - quit the program
 /getstatus                     - get current status and message
 /setstatus <status> [message]  - set the status and optional message
 /msg <address> <message>       - send a message
 /r                             - reply to last person who sent a message
'''

# pull in the readline config
inputrc = os.environ['HOME'] + '/.inputrc'
if os.path.exists(inputrc):
    readline.read_init_file(inputrc)

while True:
    cmd = raw_input('-> ').strip()
    if not cmd:
        continue
    elif cmd == '/help':
        usage()
    elif cmd == '/quit':
        msg_thread_go = False
        msg_thread.join()
        sys.exit(0)
    elif cmd == '/getstatus':
        sys.stdout.write('Status:  ')
        sys.stdout.flush()
        do_cmd('purple-remote "getstatus"')
        sys.stdout.write('Message: ')
        sys.stdout.flush()
        do_cmd('purple-remote "getstatusmessage"')
    elif cmd.split(' ', 1)[0] == '/setstatus':
        cmd_args = cmd.split(' ', 2)
        if len(cmd_args) > 2:
            do_cmd('purple-remote "setstatus?status=' + cmd_args[1] + '&message=' + cmd_args[2] + '"')
        elif len(cmd_args) > 1:
            do_cmd('purple-remote "setstatus?status=' + cmd_args[1] + '"')
        else:
            print "ERROR: Must specify a status!"
    elif cmd.split(' ', 1)[0] == '/msg':
        cmd_args = cmd.split(' ', 2)
        if len(cmd_args) > 2:
            do_cmd('purple-remote "sipe:goim?screenname=' + cmd_args[1] + '&message=' + cmd_args[2] + '"')
        else:
            print "ERROR: Must specify an address and message!"
    elif cmd.split(' ', 1)[0] == '/r':
        cmd_args = cmd.split(' ', 1)
        if len(cmd_args) == 2:
            if last_message_from != None:
                do_cmd('purple-remote "sipe:goim?screenname=' + last_message_from + '&message=' + cmd_args[1] + '"')
            else:
                print "ERROR: No one to reply to!"
        else:
            print "ERROR: Must specify message!"
    else:
        print "ERROR: Unknown command!"

